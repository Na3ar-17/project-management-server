generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id  String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  fullName String
  email String @unique
  imgLink String?
  companyName String?
  password String

  projects Project[]

  @@map("users")
}


model Project {
  id  String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String? @unique
  image String?
  end String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  tatistics Statistics?
  tasks Task[]

  @@map("projects")
}


model Statistics {
  projectId String @map("project_id") @id
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasksCompleted Int @default(0) @map("tasks_completed")
  tasksCreated Int @default(0) @map("tasks_created")
  tasksDeleted Int @default(0) @map("tasks_deleted")
  members Int @default(0)


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("statistics")
}


model Task {
  id  String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title String
  priority EnumTaskPriority @default(low)
  dueDate String @map("due_date")
  description String?
  status EnumTaskStatus @default(inQueue)


  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  subTasks subTask[]
  @@map("tasks")
}

model subTask {
  id  String @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  isCompleted Boolean @default(false) @map("is_completed")

  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("sub_tasks")
}

enum EnumTaskPriority {
  low 
  normal 
  high 
}

enum EnumTaskStatus {
  inQueue 
  onProgress 
  testing 
  completed 
}